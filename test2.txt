
// Guest-only Routes
Route::middleware('guest')->group(function () {
    Route::get('register', [AuthController::class, 'showRegister']);
    Route::post('register', [AuthController::class, 'register'])->name('register');
 
    Route::get('login', [AuthController::class, 'showLogin']);
    Route::post('login', [AuthController::class, 'login'])->name('login');
});
 
 
// Authenticated Routes
Route::middleware('auth.custom')->group(function () {
    Route::post('logout', [AuthController::class, 'logout'])->name('logout');
 
    Route::get('user/profile',[UserController::class,'showProfile'])->name('profile');
   
    Route::get('create/blog',[BlogController::class,'showBlogCreateForm'])->name('blog.create');
    Route::post('create/blog',[BlogController::class,'store'])->name('blog.store');
   
    Route::get('show/blog/{id}',[BlogController::class,'showBlog'])->name('blog.show');
 
});

----

<?php
 
namespace App\Http\Middleware;
 
use Closure;
use Illuminate\Http\Request;
use Symfony\Component\HttpFoundation\Response;
 
class EnsureUserIsAuthenticated
{
    public function handle(Request $request, Closure $next): Response
    {
        if (!auth()->check()) {
            return redirect()->route('login')->with('error', 'You need to Log in first!');
        }
        return $next($request);
    }
}

----


<?php
 
use Illuminate\Foundation\Application;
use Illuminate\Foundation\Configuration\Exceptions;
use Illuminate\Foundation\Configuration\Middleware;
 
return Application::configure(basePath: dirname(__DIR__))
    ->withRouting(
        web: __DIR__.'/../routes/web.php',
        commands: __DIR__.'/../routes/console.php',
        health: '/up',
    )
    ->withMiddleware(function (Middleware $middleware) {
        $middleware->alias([
            'auth.custom' => App\Http\Middleware\EnsureUserIsAuthenticated::class,
        ]);
    })
    ->withExceptions(function (Exceptions $exceptions) {
       
    })->create();